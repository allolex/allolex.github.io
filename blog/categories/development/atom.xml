<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | Allolexicon]]></title>
  <link href="http://allolex.net/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://allolex.net/"/>
  <updated>2013-08-12T07:09:44+01:00</updated>
  <id>http://allolex.net/</id>
  <author>
    <name><![CDATA[Damon Davison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple includes using Markdown]]></title>
    <link href="http://allolex.net/blog/2013/07/21/simple-includes-using-markdown/"/>
    <updated>2013-07-21T11:59:00+01:00</updated>
    <id>http://allolex.net/blog/2013/07/21/simple-includes-using-markdown</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been sending out a fair few messages to potential sponsors, applicants,
volunteers and coaches for <a href="http://railsgirls-sfl.org">Rails Girls South Florida</a>. To make this job
easier, I edit all my documents using <a href="http://daringfireball.net/projects/markdown/">Markdown syntax</a>.</p>

<p>I find myself repeating a lot of the same information, so in order to
<a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> up my Markdown files, I create them from several different
components by using template folders. I do it this way because Markdown has no
native way of including sub-documents into a main document.</p>

<ol>
<li>Each template folder contains symlinks to each section Markdown file.</li>
<li>Each symlink is named so that it appears in the right order inside the final document.</li>
</ol>


<p>Here&rsquo;s what the folder structure looks like for my Rails Girls documents:</p>

<pre><code>.
  applicant
    00-intro.md -&gt; ../docs/intro.md
    01-apply.md -&gt; ../docs/applying.md
    99-footer.md -&gt; ../docs/footer.md
    applying.html
    applying.markdown
  coach
    00-intro.md -&gt; ../docs/intro.md
    01-coach.md -&gt; ../docs/coaching-volunteering.md
    99-footer.md -&gt; ../docs/footer.md
    coaching.html
    coaching.markdown
  docs
    applying.md
    coaching-volunteering.md
    footer.md
    intro.md
    sponsor.md
  sponsor
    00-intro.md -&gt; ../docs/intro.md
    02-sponsor.md -&gt; ../docs/sponsor.md
    03-coaching.md -&gt; ../docs/coaching-volunteering.md
    99-footer.md -&gt; ../docs/footer.md
    sponsor.html
    sponsor.markdown
</code></pre>

<p>It&rsquo;s very easy to link the right content inside the template folder. For
example, when I created the <code>coach</code> template folder, I typed in the following
commands:</p>

<pre><code>mkdir coach                                         # Make a template folder and
cd coach/                                           # make it your current working directory
ln -s ../docs/intro.md 00-intro.md                  # Symlink the intro/header
ln -s ../docs/coaching-volunteering.md 01-coach.md  # Symlink the content section(s)
ln -s ../docs/footer.md 99-footer.md                # Symlink the footer/signature
cat *.md                                            # To see how it looks on-screen
cat *.md &gt; coaching.markdown                        # Make a complete markdown document
cat *.md | markdown &gt; coaching.html                 # Generate HTML
</code></pre>

<p>I use <a href="http://markedapp.com/">Marked.app</a> to view Markdown files, so having a complete file is
convenient for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three Talks on Testing (in Ruby)]]></title>
    <link href="http://allolex.net/blog/2013/07/12/three-talks-on-testing/"/>
    <updated>2013-07-12T11:02:00+01:00</updated>
    <id>http://allolex.net/blog/2013/07/12/three-talks-on-testing</id>
    <content type="html"><![CDATA[<p>Here are three talks on testing in Ruby I think all developers should see. I&rsquo;ve
presented them in the order in which I think they should be watched.</p>

<p>Sandi&rsquo;s and Katrina&rsquo;s talks in particular focus on what testing gives you and
what you should be testing. Andy&rsquo;s talk is a live coding session in which he
TDD&rsquo;s a library.</p>

<ol>
<li>Sandi Metz: <a href="http://www.youtube.com/watch?v=qPfQM4w4I04">&ldquo;The Magic Tricks of Testing&rdquo;</a> (Ancient City Ruby 2013)</li>
<li>Katrina Owen: <a href="https://vimeo.com/68730418">&ldquo;467 tests, 0 failures, 0 confidence&rdquo;</a> (Railsberry 2013)</li>
<li>Andy Lindeman: <a href="http://www.youtube.com/watch?v=2aYdtS7FZJA">&ldquo;Building a mocking library&rdquo;</a> (Ancient City Ruby 2013)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MMXII Hackathon video]]></title>
    <link href="http://allolex.net/blog/2012/12/21/MMXII-Hackathon-video/"/>
    <updated>2012-12-21T00:00:00+00:00</updated>
    <id>http://allolex.net/blog/2012/12/21/MMXII-Hackathon-video</id>
    <content type="html"><![CDATA[<iframe src="http://player.vimeo.com/video/59128361" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>A video I made for the MMXII Hackathon we organised at <a href="http://new-%0Abamboo.co.uk">New Bamboo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Testing Resources for Wordpress Plugins]]></title>
    <link href="http://allolex.net/blog/2012/03/10/php-testing-resources-for-wordpress-plugins/"/>
    <updated>2012-03-10T00:00:00+00:00</updated>
    <id>http://allolex.net/blog/2012/03/10/php-testing-resources-for-wordpress-plugins</id>
    <content type="html"><![CDATA[<p>Since I&rsquo;ve been developing a WordPress theme and plugins for the new website
at work, I&rsquo;ve been working with PHP quite intensively for the last couple of
months. For a lot of reasons, PHP isn&rsquo;t my favourite language to work in, and
the lack of testing culture amongst PHP programmers is really underlined by
WordPress theme and plugin developers not shipping their code with tests,
which could also be a reflection of the WordPress core having lots of tests,
but having them <a href="http://codex.wordpress.org/Automated_Testing">available only when you clone the Subversion
repository</a>.</p>

<p>I&rsquo;ve also been thinking about how projects like <a href="https://github.com/cashmusic/DIY">CASH Music
DIY</a> could really benefit from a combination
of test-driven development (TDD) for the developers themselves and behaviour-
driven development (BDD) to allow non-experts to write tests that can double
as documentation using <a href="http://cukes.info/">Cucumber</a>. In fact, I started this
whole search by looking for tips on how to use Cucumber and
<a href="http://jnicklas.github.com/capybara/">Capybara</a> to do integration testing on
PHP projects.</p>

<p>Cucumber allows you to write natural-language feature tests, such as the
following example taken from their Github repository:</p>

<p><div>
  <pre><code class='python'>Feature: Addition
  In order to avoid silly mistakes
  As a math idiot
  I want to be told the sum of two numbers&lt;/p&gt;

&lt;p&gt;  Scenario Outline: Add two numbers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Given I have entered  into the calculator
And I have entered  into the calculator
When I press 
Then the result should be  on the screen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;| input_1 | input_2 | button | output |
| 20      | 30      | add    | 50     |
| 2       | 5       | add    | 7      |
| 0       | 40      | add    | 40     |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre>
</div>
</p>

<p>On the unit testing and TDD front, Smashing Magazine has a brand new <a href="http://coding.smashingmagazine.com/2012/03/07/writing-unit-tests-for-%0Awordpress-plugins/">article
on writing unit tests for WP
plugins</a> that uses the JavaScript
<a href="http://docs.jquery.com/QUnit">QUnit</a>. There is a simple <a href="http://www.lastcraft.com/first_test_tutorial.php">Lastcraft Unit
Testing Tutorial</a> using
<a href="http://www.simpletest.org/">SimpleTest</a>.</p>

<p>Where BDD is concerned, Otaqui.com has a Gist for using <a href="http://otaqui.com/blog/1072/testing-remote-php-websites-with-capybara-%0Acucumber-mechanize-selenium-2-webdriver-and-saucelabs/">Cucumber, Capybara,
Mechanize and Selenium to test remote PHP web
sites</a>.</p>

<p>Since I&rsquo;m just starting out with this, I&rsquo;d love to hear from some PHP testing
experts and anyone else who can help me fill in the gaps.</p>

<p>More resources I&rsquo;ve found since posting this:</p>

<ul>
<li>Eric Hogue&rsquo;s <a href="http://erichogue.ca/2011/06/php/test-driven-development-in-php/">post on TDD in PHP using SimpleTest and PHPUnit</a>.</li>
<li>There&rsquo;s <a href="http://techportal.ibuildings.com/2011/08/03/outside-in-behaviour-driven-development-in-php-part-2/">a PHP port of RSpec called PHPSpec</a>, which is a really cool idea for doing outside-in BDD with PHP. It&rsquo;s not as pretty as Ruby because PHP isn&rsquo;t syntactically sweet enough to eliminate all the sigils that are optional in Ruby and the Domain-Specific Languages (DSL&rsquo;s) derived from it, plus other stuff*.</li>
<li><p>Sebastian Bergmann and Stefan Priebsch have written <a href="http://qualityassuranceinphpprojects.com/">a book called <em>Real-World Solutions for Developing High-Quality PHP Frameworks and Applications</em></a> whose content is hopefully easier to digest than the English title. Their original German title is <em>Softwarequalität in PHP-Projekten</em> &lsquo;Software quality in PHP projects", and much <em>leichter zu verdauen</em>.</p></li>
<li><p>Camel case for everything, really?</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The ethics of the web]]></title>
    <link href="http://allolex.net/blog/2011/12/30/at-least-on-the-web/"/>
    <updated>2011-12-30T00:00:00+00:00</updated>
    <id>http://allolex.net/blog/2011/12/30/at-least-on-the-web</id>
    <content type="html"><![CDATA[<p><a href="http://www.npr.org/2011/12/28/144073696/david-carr-a-media-omnivore-%0Adiscusses-his-%0Adiet?ft=1&amp;f=1001&amp;sc=tw&amp;utm_source=twitterfeed&amp;utm_medium=twitter">David Carr: A Media Omnivore Discusses His Diet :
NPR</a> (via
<a href="http://thisistheverge.tumblr.com/">thisistheverge</a>)</p>

<blockquote><p>At least on the Web, you can amend.
The ethic of the Web is to say what
you know as quickly as you can, and
then reiterate over and over again.
The Web is kind of a self-cleaning
oven, and what you have up there can
grow more accurate as time goes by.
That’s never true of print. It’s
always there for the ages.</p></blockquote>

<p>This is a variation of the &ldquo;release early, release often&rdquo; directive in
software development, isn&rsquo;t it?</p>
]]></content>
  </entry>
  
</feed>
